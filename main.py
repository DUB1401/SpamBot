from Source.UI.Menu import Decorators, ReplyKeyboards
from Source.Core.Mailing import Mailer
from Source.CLI import Interaction

from dublib.CLI.Terminalyzer import Command, ParametersTypes, Terminalyzer
from dublib.Methods.Filesystem import MakeRootDirectories, ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.TelebotUtils.Users import UsersManager
from telebot import TeleBot, types

import requests
import os

#==========================================================================================#
# >>>>> –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø <<<<< #
#==========================================================================================#

CheckPythonMinimalVersion(3, 10)
MakeRootDirectories(["Data/Sessions"])
Settings = ReadJSON("Settings.json")

#==========================================================================================#
# >>>>> –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–û–ú–ê–ù–î <<<<< #
#==========================================================================================#

Com = Command("run")
ComPos = Com.create_position("MODE", "–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ SpamBot.")
Com.add_flag("s", "–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ Telegram.")
Com.add_flag("c", "–ó–∞–ø—É—Å–∫–∞–µ—Ç CLI.")
Com.add_key("key", ParametersTypes.Number, "–£–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞.")

Analyzer = Terminalyzer()
Analyzer.enable_help(True)
ParsedCommand = Analyzer.check_commands(Com)
Users = UsersManager("Data/Users")

#==========================================================================================#
# >>>>> –ó–ê–ü–£–°–ö CLI-–†–ï–ñ–ò–ú–ê <<<<< #
#==========================================================================================#

if not ParsedCommand or ParsedCommand.check_flag("c"):
	UserKey = None
	if ParsedCommand: UserKey = ParsedCommand.get_key_value("key")
	InteractionObject = Interaction(Settings)
	InteractionObject.title()
	InteractionObject.auth(UserKey)
	InteractionObject.run()

#==========================================================================================#
# >>>>> –ó–ê–ü–£–°–ö –ë–û–¢–ê <<<<< #
#==========================================================================================#

Clear()
Bot = TeleBot(Settings["token"])

@Bot.message_handler(commands = ["start"])
def BotProcessCommand(Message: types.Message):
	User = Users.auth(Message.from_user)
	User.set_property("message", None, force = False)
	User.set_property("attachment", None, force = False)

	if User.has_permissions("admin"):
		Bot.send_message(
			chat_id = Message.chat.id,
			text = f"üîí –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º <b>—Ä–∞–∑—Ä–µ—à—ë–Ω</b>. –í–∞—à –∫–ª—é—á: <code>{User.id}</code>.",
			parse_mode = "HTML",
			reply_markup = ReplyKeyboards.menu()
		)

	elif Message.text.endswith(Settings["password"]):
		Bot.send_message(
			chat_id = Message.chat.id,
			text = f"üîí –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º <b>—Ä–∞–∑—Ä–µ—à—ë–Ω</b>. –í–∞—à –∫–ª—é—á: <code>{User.id}</code>.",
			parse_mode = "HTML",
			reply_markup = ReplyKeyboards.menu()
		)
		User.add_permissions("admin")
		
	else:
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "üîí –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º <b>–∑–∞–ø—Ä–µ—â—ë–Ω</b>. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä–æ–ª—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
			parse_mode = "HTML"
		)

Decorators.reply_buttons(Bot, Users)

@Bot.message_handler(content_types = ["text"])
def BotProcessText(Message: types.Message):
	User = Users.auth(Message.from_user)

	if User.expected_type == "message":
		User.set_property("message", Message.html_text)
		User.set_expected_type(None)
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
		)

@Bot.message_handler(content_types = ["photo"])
def BotProcessText(Message: types.Message):
	User = Users.auth(Message.from_user)

	if User.expected_type == "image":
		User.set_expected_type(None)
		Bot.send_chat_action(Message.chat.id, "typing")

		try:
			Photo = Message.photo[-1]
			FileInfo = Bot.get_file(Photo.file_id)
			Filename = FileInfo.file_path.split("/")[-1]
			FileURL = f"https://api.telegram.org/file/bot{Bot.token}/{FileInfo.file_path}"
			FileDirectory = f"Data/Temp/{User.id}/Attachments"
			if not os.path.exists(FileDirectory): os.makedirs(FileDirectory)
			with open(f"{FileDirectory}/{Filename}", "wb") as FileWriter: FileWriter.write(requests.get(FileURL).content)

			Attachments: list[dict] = User.get_property("attachments")
			Attachments.append({"filename": Filename, "type": "photo"})
			User.set_property("attachments", Attachments)

			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
				reply_markup = ReplyKeyboards.message(User)
			)

		except:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ù–µ —É–¥–∞—ë—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
			)

@Bot.message_handler(content_types = ["video"])
def BotProcessText(Message: types.Message):
	User = Users.auth(Message.from_user)

	if User.expected_type == "video":
		User.set_expected_type(None)
		Bot.send_chat_action(Message.chat.id, "typing")

		try:
			Video = Message.video
			FileInfo = Bot.get_file(Video.file_id)
			Filename = FileInfo.file_path.split("/")[-1]
			FileURL = f"https://api.telegram.org/file/bot{Bot.token}/{FileInfo.file_path}"
			FileDirectory = f"Data/Temp/{User.id}/Attachments"
			if not os.path.exists(FileDirectory): os.makedirs(FileDirectory)
			with open(f"{FileDirectory}/{Filename}", "wb") as FileWriter: FileWriter.write(requests.get(FileURL).content)

			Attachments: list[dict] = User.get_property("attachments")
			Attachments.append({"filename": Filename, "type": "video"})
			User.set_property("attachments", Attachments)

			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
				reply_markup = ReplyKeyboards.message(User)
			)

		except:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ù–µ —É–¥–∞—ë—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
			)

@Bot.message_handler(content_types = ["document"])
def BotProcessText(Message: types.Message):
	User = Users.auth(Message.from_user)

	if User.expected_type == "targets":
		User.set_expected_type(None)

		try:
			Document = Message.document
			FileInfo = Bot.get_file(Document.file_id)
			FileURL = f"https://api.telegram.org/file/bot{Bot.token}/{FileInfo.file_path}"
			FileDirectory = f"Data/Temp/{User.id}"
			if not os.path.exists(FileDirectory): os.makedirs(FileDirectory)
			with open(f"{FileDirectory}/targets.xlsx", "wb") as FileWriter: FileWriter.write(requests.get(FileURL).content)
			Mailer().parse_targets_from_excel(User)
			Bot.send_message(chat_id = Message.chat.id, text = "–í—ã–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

		except ZeroDivisionError:
			Bot.send_message(chat_id = Message.chat.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑—ä—è—Ç—å –≤—ã–±–æ—Ä–∫—É –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")

Bot.infinity_polling()